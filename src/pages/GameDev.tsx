import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";

export default function GameDev() {
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [projectName, setProjectName] = useState('');

  const gameTemplates = [
    {
      id: 'platformer',
      name: '2D –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä —Å –ø—Ä—ã–∂–∫–∞–º–∏ –∏ —Å–±–æ—Ä–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      time: '30 –º–∏–Ω',
      tech: ['HTML5', 'JavaScript', 'Canvas'],
      preview: 'üéÆ',
      features: ['–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏', '–§–∏–∑–∏–∫–∞ –ø—Ä—ã–∂–∫–æ–≤', '–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π', '–°–±–æ—Ä –º–æ–Ω–µ—Ç']
    },
    {
      id: 'puzzle',
      name: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
      description: '–õ–æ–≥–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ —Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –±–ª–æ–∫–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á',
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
      time: '45 –º–∏–Ω',
      tech: ['React', 'TypeScript', 'CSS'],
      preview: 'üß©',
      features: ['–°–µ—Ç–∫–∞ –±–ª–æ–∫–æ–≤', '–õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', '–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤', '–¢–∞–π–º–µ—Ä']
    },
    {
      id: 'arcade',
      name: '–ê—Ä–∫–∞–¥–∞',
      description: '–ë—ã—Å—Ç—Ä–∞—è –∞—Ä–∫–∞–¥–Ω–∞—è –∏–≥—Ä–∞ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é',
      difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
      time: '60 –º–∏–Ω',
      tech: ['WebGL', 'JavaScript', 'WebAudio'],
      preview: 'üïπÔ∏è',
      features: ['–ë—ã—Å—Ç—Ä—ã–π –≥–µ–π–º–ø–ª–µ–π', '–°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã', '–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã', '–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤']
    },
    {
      id: 'quiz',
      name: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞',
      description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤',
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      time: '20 –º–∏–Ω',
      tech: ['React', 'JSON', 'LocalStorage'],
      preview: '‚ùì',
      features: ['–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤', '–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏']
    }
  ];

  const codeExamples = [
    {
      title: '–î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
      language: 'JavaScript',
      code: `class Player {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.speed = 5;
    this.jumping = false;
  }
  
  update() {
    if (keys.left) this.x -= this.speed;
    if (keys.right) this.x += this.speed;
    if (keys.up && !this.jumping) {
      this.jump();
    }
  }
  
  jump() {
    this.jumping = true;
    this.velocity = -15;
  }
}`
    },
    {
      title: '–°–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–∏–∑–∏–π',
      language: 'JavaScript',
      code: `function checkCollision(rect1, rect2) {
  return rect1.x < rect2.x + rect2.width &&
         rect1.x + rect1.width > rect2.x &&
         rect1.y < rect2.y + rect2.height &&
         rect1.y + rect1.height > rect2.y;
}

function handleCollisions() {
  platforms.forEach(platform => {
    if (checkCollision(player, platform)) {
      player.onGround = true;
      player.y = platform.y - player.height;
    }
  });
}`
    }
  ];

  const recentProjects = [
    {
      name: 'Space Adventure',
      type: '–ê—Ä–∫–∞–¥–∞',
      progress: 85,
      lastModified: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      status: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    },
    {
      name: 'Math Quiz Pro',
      type: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞',
      progress: 100,
      lastModified: '–í—á–µ—Ä–∞',
      status: '–ó–∞–≤–µ—Ä—à—ë–Ω'
    },
    {
      name: 'Puzzle Master',
      type: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
      progress: 60,
      lastModified: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
      status: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-background/95 text-foreground">
      {/* Header */}
      <header className="sticky top-0 z-50 glass border-b border-border/50 backdrop-blur-xl">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button variant="ghost" size="sm">
                <Icon name="ArrowLeft" size={20} />
              </Button>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-neon-magenta to-neon-cyan flex items-center justify-center animate-neon-pulse">
                  <Icon name="Gamepad2" size={24} className="text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-primary">–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä</h1>
                  <p className="text-sm text-muted-foreground">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ ‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Badge variant="outline" className="neon-border border-neon-magenta">
                <Icon name="Code" size={14} className="mr-1" />
                Code Gen
              </Badge>
              <Button variant="outline" size="sm">
                <Icon name="Share" size={16} />
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-6 py-8">
        <Tabs defaultValue="templates" className="space-y-8">
          <TabsList className="grid w-full grid-cols-4 glass">
            <TabsTrigger value="templates" className="data-[state=active]:bg-primary/20">
              <Icon name="Grid3X3" size={16} className="mr-2" />
              –®–∞–±–ª–æ–Ω—ã
            </TabsTrigger>
            <TabsTrigger value="projects" className="data-[state=active]:bg-primary/20">
              <Icon name="FolderOpen" size={16} className="mr-2" />
              –ü—Ä–æ–µ–∫—Ç—ã
            </TabsTrigger>
            <TabsTrigger value="code" className="data-[state=active]:bg-primary/20">
              <Icon name="Code" size={16} className="mr-2" />
              –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
            </TabsTrigger>
            <TabsTrigger value="learn" className="data-[state=active]:bg-primary/20">
              <Icon name="BookOpen" size={16} className="mr-2" />
              –û–±—É—á–µ–Ω–∏–µ
            </TabsTrigger>
          </TabsList>

          {/* Templates Tab */}
          <TabsContent value="templates" className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-4xl font-bold mb-4 neon-text text-primary">
                –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–≥—Ä—ã
              </h2>
              <p className="text-xl text-muted-foreground">
                –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å –ø–æ–ª–Ω—ã–º –∫–æ–¥–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {gameTemplates.map((template) => (
                <Card 
                  key={template.id}
                  className={`glass p-6 cursor-pointer transition-all duration-300 hover:neon-border hover:border-neon-magenta ${
                    selectedTemplate === template.id ? 'neon-border border-neon-cyan' : ''
                  }`}
                  onClick={() => setSelectedTemplate(template.id)}
                >
                  <div className="text-center mb-4">
                    <div className="text-6xl mb-4">{template.preview}</div>
                    <h3 className="text-xl font-bold text-primary mb-2">{template.name}</h3>
                    <p className="text-muted-foreground text-sm">{template.description}</p>
                  </div>

                  <div className="flex justify-center space-x-4 mb-4">
                    <Badge variant="outline" className="text-xs">
                      <Icon name="Clock" size={12} className="mr-1" />
                      {template.time}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      <Icon name="TrendingUp" size={12} className="mr-1" />
                      {template.difficulty}
                    </Badge>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium mb-2">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</p>
                    <div className="flex flex-wrap gap-1">
                      {template.tech.map((tech) => (
                        <Badge key={tech} variant="secondary" className="text-xs">
                          {tech}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium mb-2">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</p>
                    <ul className="text-xs text-muted-foreground space-y-1">
                      {template.features.map((feature, index) => (
                        <li key={index}>‚Ä¢ {feature}</li>
                      ))}
                    </ul>
                  </div>

                  {selectedTemplate === template.id && (
                    <div className="border-t border-border pt-4 animate-fade-in">
                      <Input
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã"
                        value={projectName}
                        onChange={(e) => setProjectName(e.target.value)}
                        className="mb-3"
                      />
                      <Button 
                        className="w-full bg-gradient-to-r from-neon-magenta to-neon-cyan text-white neon-border"
                        disabled={!projectName.trim()}
                      >
                        <Icon name="Rocket" size={16} className="mr-2" />
                        –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
                      </Button>
                    </div>
                  )}
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Projects Tab */}
          <TabsContent value="projects" className="space-y-8">
            <div className="flex items-center justify-between">
              <h2 className="text-3xl font-bold text-primary">–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</h2>
              <Button className="bg-gradient-to-r from-neon-blue to-neon-cyan text-white">
                <Icon name="Plus" size={16} className="mr-2" />
                –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
              </Button>
            </div>

            <div className="grid gap-6">
              {recentProjects.map((project, index) => (
                <Card key={index} className="glass p-6 hover:neon-border hover:border-neon-blue transition-all duration-300">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 rounded-lg bg-gradient-to-r from-neon-blue to-neon-cyan flex items-center justify-center">
                        <Icon name="Gamepad2" size={24} className="text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-bold text-primary">{project.name}</h3>
                        <p className="text-sm text-muted-foreground">{project.type} ‚Ä¢ {project.lastModified}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-4">
                      <div className="text-right">
                        <p className="text-sm font-medium">{project.progress}%</p>
                        <Progress value={project.progress} className="w-24" />
                      </div>
                      <Badge 
                        variant={project.status === '–ó–∞–≤–µ—Ä—à—ë–Ω' ? 'default' : 'secondary'}
                        className={project.status === '–ó–∞–≤–µ—Ä—à—ë–Ω' ? 'bg-green-500' : ''}
                      >
                        {project.status}
                      </Badge>
                      <Button variant="outline" size="sm">
                        <Icon name="ExternalLink" size={16} />
                      </Button>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Code Examples Tab */}
          <TabsContent value="code" className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-primary mb-4">–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞</h2>
              <p className="text-muted-foreground">–ì–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã</p>
            </div>

            <div className="grid gap-6">
              {codeExamples.map((example, index) => (
                <Card key={index} className="glass p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold text-primary">{example.title}</h3>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">{example.language}</Badge>
                      <Button variant="outline" size="sm">
                        <Icon name="Copy" size={16} />
                      </Button>
                    </div>
                  </div>
                  <div className="bg-background rounded-lg p-4 border border-border">
                    <pre className="text-sm text-muted-foreground overflow-x-auto">
                      <code>{example.code}</code>
                    </pre>
                  </div>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Learning Tab */}
          <TabsContent value="learn" className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-primary mb-4">–ò–∑—É—á–µ–Ω–∏–µ GameDev</h2>
              <p className="text-muted-foreground">–û—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫</p>
            </div>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              <Card className="glass p-6 hover:neon-border hover:border-neon-blue transition-all duration-300">
                <Icon name="Play" size={32} className="text-neon-blue mb-4" />
                <h3 className="text-lg font-bold text-primary mb-2">–û—Å–Ω–æ–≤—ã JavaScript</h3>
                <p className="text-muted-foreground text-sm mb-4">
                  –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä
                </p>
                <Button variant="outline" className="w-full">
                  –ù–∞—á–∞—Ç—å –∫—É—Ä—Å
                </Button>
              </Card>

              <Card className="glass p-6 hover:neon-border hover:border-neon-magenta transition-all duration-300">
                <Icon name="Palette" size={32} className="text-neon-magenta mb-4" />
                <h3 className="text-lg font-bold text-primary mb-2">–ê–Ω–∏–º–∞—Ü–∏–∏ CSS</h3>
                <p className="text-muted-foreground text-sm mb-4">
                  –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                </p>
                <Button variant="outline" className="w-full">
                  –ò–∑—É—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                </Button>
              </Card>

              <Card className="glass p-6 hover:neon-border hover:border-neon-cyan transition-all duration-300">
                <Icon name="Gamepad2" size={32} className="text-neon-cyan mb-4" />
                <h3 className="text-lg font-bold text-primary mb-2">–ì–µ–π–º–¥–∏–∑–∞–π–Ω</h3>
                <p className="text-muted-foreground text-sm mb-4">
                  –ü—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä
                </p>
                <Button variant="outline" className="w-full">
                  –û—Å–Ω–æ–≤—ã –¥–∏–∑–∞–π–Ω–∞
                </Button>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}